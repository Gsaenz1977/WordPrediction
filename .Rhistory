utf<-Final_ngram1
btf<-Final_ngram2
ttf<-Final_ngram3
qtf<-Final_ngram4
save(utf, btf, ttf, qtf, file = "probdata6.RData")
runApp('RCode/FinalProjectImproved/FinalProject')
View(qtf)
runApp('RCode/FinalProjectImproved/FinalProject')
len
runApp('RCode/FinalProjectImproved/FinalProject')
load("probdata.RData")
View(utf)
Final_ngram1<-rename(utf, c("X1"="word1", "freq","prop"))
Final_ngram2<-rename(btf, c("term"="ngram", "freq","prop","X1=word1" ,"X2=word2"))
Final_ngram3<-rename(ttf, c("term"="ngram", "freq","prop","X1=word1" ,"X2=word2","X3=word3"))
Final_ngram4<-rename(qtf, c("term"="ngram", "freq","prop","X1=word1","X2=word2","X3=word3","X4=word4"))
View(Final_ngram1)
View(Final_ngram2)
View(Final_ngram3)
Final_ngram2<-rename(btf, c("term"="ngram", "freq","prop","X1=word1" ,"X2=word2"))
View(Final_ngram2)
View(btf)
View(Final_ngram2)
Final_ngram2<-rename(btf, c("freq","term"="ngram","X1=word1","X2=word2","prop",))
Final_ngram2<-rename(btf, c("freq","term"="ngram","X1=word1","X2=word2","prop"))
View(Final_ngram2)
Final_ngram2<-rename(btf, c("freq","ngram","X1=word1","X2=word2","prop"))
View(Final_ngram2)
Final_ngram1<-rename(utf, c("X1"="word1", "freq","prop"))
Final_ngram2<-rename(btf, c("freq","term"="ngram","X1"="word1","X2"="word2","prop"))
Final_ngram3<-rename(ttf, c("term"="ngram", "freq","prop","X1"="word1" ,"X2"="word2","X3"="word3"))
Final_ngram4<-rename(qtf, c("term"="ngram", "freq","prop","X1"="word1","X2"="word2","X3"="word3","X4"="word4"))
View(Final_ngram3)
View(Final_ngram4)
View(Final_ngram1)
save(Final_ngram1, Final_ngram2, Final_ngram3, Final_ngram4, file = "FinalData.RData")
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
shiny::runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
verbatim <- "C://Users/gsae9643/Documents/CSAT/Book3.csv"
verbatim <- readLines(verbatim)
head(verbatim)
verbatim3 <- get_sentiment(verbatim, method="nrc")
sum(verbatim3)
mean(verbatim3)
summary(verbatim3)
plot(
verbatim3,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence"
)
percent_vals <- get_percentage_values(verbatim3)
plot(
percent_vals,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence",
col="red"
)
nrc_data <- get_nrc_sentiment(verbatim)
nrc_data <- get_stanford_sentiment(verbatim)
library(pander)
pander::pandoc.table(nrc_data[, 1:8], split.table = Inf)
install.packages("pander")
library(pander)
pander::pandoc.table(nrc_data[, 1:8], split.table = Inf)
pander::pandoc.table(nrc_data[, 9:10])
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
colSums(prop.table(nrc_data[, 1:8])),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
get_stanford_sentiment()
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
verbatim <- "C://Users/gsae9643/Documents/CSAT/passive.csv"
verbatim <- readLines(verbatim)
head(verbatim)
verbatim3 <- get_sentiment(verbatim, method="nrc")
sum(verbatim3)
mean(verbatim3)
summary(verbatim3)
plot(
verbatim3,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence"
)
percent_vals <- get_percentage_values(verbatim3)
plot(
percent_vals,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence",
col="red"
)
nrc_data <- get_nrc_sentiment(verbatim)
nrc_data <- get_stanford_sentiment(verbatim)
#angry_items <- which(nrc_data$anger > 0)
#verbatim[angry_items]
#joy_items <- which(nrc_data$joy > 0)
#verbatim[joy_items]
library(pander)
pander::pandoc.table(nrc_data[, 1:8], split.table = Inf)
pander::pandoc.table(nrc_data[, 9:10])
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
plot(
verbatim3,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence"
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
colors(red)
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("red","blue"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("tomato","blue"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("firebrick","blue"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("firebrick","navy"),
main = "Emotions in Verbatim", xlab="Percentage"
)
pander::pandoc.table(nrc_data[, 1:8], split.table = Inf)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("firebrick","navy"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage",
col=c("navy","navy","navy","firebrick","firebrick","firebrick","navy","firebrick")
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 1,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage",
col=c("navy","navy","navy","firebrick","firebrick","firebrick","navy","firebrick")
)
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
verbatim <- "C://Users/gsae9643/Documents/CSAT/passive.csv"
verbatim <- readLines(verbatim)
head(verbatim)
#verbatim2<-get_text_as_string("C://Users/gsae9643/Documents/CSAT/LTR.txt")
verbatim3 <- get_sentiment(verbatim, method="nrc")
#verbatim4 <- get_sentiment(verbatim2, method="syuzhet")
sum(verbatim3)
mean(verbatim3)
summary(verbatim3)
plot(
verbatim3,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence"
)
percent_vals <- get_percentage_values(verbatim3)
plot(
percent_vals,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence",
col="red"
)
nrc_data <- get_nrc_sentiment(verbatim)
nrc_data <- get_stanford_sentiment(verbatim)
#angry_items <- which(nrc_data$anger > 0)
#verbatim[angry_items]
#joy_items <- which(nrc_data$joy > 0)
#verbatim[joy_items]
library(pander)
pander::pandoc.table(nrc_data[, 1:8], split.table = Inf)
pander::pandoc.table(nrc_data[, 9:10])
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("firebrick","navy"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage",
col=c("navy","navy","navy","firebrick","firebrick","firebrick","navy","firebrick")
)
percent_vals <- get_percentage_values(verbatim3)
plot(
percent_vals,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence",
col="red"
)
nrc_data <- get_nrc_sentiment(verbatim)
nrc_data <- get_stanford_sentiment(verbatim)
library(wordcloud);
library(tm);
library(syuzhet)
speech <- Corpus(DirSource("C://Users/gsae9643/Documents/CSAT"))
inspect(speech)
speechcl <- tm_map(speech, stripWhitespace)
speechcl <- tm_map(speechcl, tolower)
speechcl <- tm_map(speechcl, removePunctuation)
speechcl <- tm_map(speechcl, removeWords, stopwords("spanish"))
speechcl <- tm_map(speechcl, PlainTextDocument)
wordcloud(speechcl, scale = c(6, 0.5), max.words = 30, random.order = FALSE, rot.per = 0.35, use.r.layout = TRUE, colors = brewer.pal(8, "Dark2"))
verbatim <- "C://Users/gsae9643/Documents/CSAT/detractor.csv"
verbatim <- readLines(verbatim)
head(verbatim)
#verbatim2<-get_text_as_string("C://Users/gsae9643/Documents/CSAT/LTR.txt")
verbatim3 <- get_sentiment(verbatim, method="nrc")
#verbatim4 <- get_sentiment(verbatim2, method="syuzhet")
sum(verbatim3)
mean(verbatim3)
summary(verbatim3)
plot(
verbatim3,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence"
)
percent_vals <- get_percentage_values(verbatim3)
plot(
percent_vals,
type="l",
main="Verbatim Analysis",
xlab = "Comment Assessd",
ylab= "Emotional Valence",
col="red"
)
nrc_data <- get_nrc_sentiment(verbatim)
nrc_data <- get_stanford_sentiment(verbatim)
#angry_items <- which(nrc_data$anger > 0)
#verbatim[angry_items]
#joy_items <- which(nrc_data$joy > 0)
#verbatim[joy_items]
library(pander)
pander::pandoc.table(nrc_data[, 1:8], split.table = Inf)
pander::pandoc.table(nrc_data[, 9:10])
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
col=c("firebrick","navy"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage",
col=c("navy","navy","navy","firebrick","firebrick","firebrick","navy","firebrick")
)
barplot(
sort(colSums(prop.table(nrc_data[, 9:10]))),
#horiz = TRUE,
cex.names = 1,
las = 1,
col=c("firebrick","navy"),
main = "Emotions in Verbatim", xlab="Percentage"
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage",
col=c("navy","navy","navy","firebrick","firebrick","firebrick","navy","firebrick")
)
barplot(
sort(colSums(prop.table(nrc_data[, 1:8]))),
#horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Emotions in Verbatim", xlab="Percentage",
col=c("navy","navy","firebrick","navy","firebrick","firebrick","navy","firebrick")
)
shiny::runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
shiny::runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
runApp('RCode/FinalProjectImproved/FinalProject')
